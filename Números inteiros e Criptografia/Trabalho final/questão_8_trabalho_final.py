# -*- coding: utf-8 -*-
"""Questão 8 - Trabalho Final

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LcVp4GSmEvKos5SUTWu_Sbm3IYsROHTK

Utilizando a função "Euclides_estendido", feita em aula, para encontrar d.
"""

def Euclides_estendido(a,b):
  """
  ...
  """
  Dividendo, Divisor = a,b
  x_ant, y_ant = 1,0
  x_novo, y_novo = 0,1
  while Divisor != 0:
    Quociente, Resto = divmod(Dividendo, Divisor) # retorna o quociente e resto de uma vez só
    x_ant, x_novo = x_novo, (x_ant - x_novo*Quociente)
    y_ant, y_novo = y_novo, (y_ant - y_novo*Quociente)
    Dividendo, Divisor = Divisor, Resto
  return Dividendo, x_ant, y_ant

e = 4107
phi = 6160
Euclides_estendido(e, phi)

"""d = 3

Utilizando a função "descriptar", feita na questão 12 desse trabalho, para decodificar a mensagem.
"""

def descriptar(lista_blocos, n, d):
  """
  Função que recebe como entrada uma lista blocos e números n e d, 
  e retorna a string resultante da descriptação da sequência de 
  blocos usando a chave privada de módulo n e expoente d.
  """
  códigos_para_símbolos = {111: '0', 112: '1', 113: '2', 114: '3', 115: '4',
  116: '5', 117: '6', 118: '7', 119: '8', 121: '9', 122: '=', 123: '+',
  124: '-', 125: '/', 126: '*', 127: 'a', 128: 'b', 129: 'c', 131: 'd',
  132: 'e', 133: 'f', 134: 'g', 135: 'h', 136: 'i', 137: 'j', 138: 'k',
  139: 'l', 141: 'm', 142: 'n', 143: 'o', 144: 'p', 145: 'q', 146: 'r',
  147: 's', 148: 't', 149: 'u', 151: 'v', 152: 'w', 153: 'x', 154: 'y',
  155: 'z', 156: 'á', 157: 'à', 158: 'â', 159: 'ã', 161: 'é', 162: 'ê',
  163: 'í', 164: 'ó', 165: 'ô', 166: 'õ', 167: 'ú', 168: 'ç', 169: 'A',
  171: 'B', 172: 'C', 173: 'D', 174: 'E', 175: 'F', 176: 'G', 177: 'H',
  178: 'I', 179: 'J', 181: 'K', 182: 'L', 183: 'M', 184: 'N', 185: 'O',
  186: 'P', 187: 'Q', 188: 'R', 189: 'S', 191: 'T', 192: 'U', 193: 'V',
  194: 'W', 195: 'X', 196: 'Y', 197: 'Z', 198: 'Á', 199: 'À', 211: 'Â',
  212: 'Ã', 213: 'É', 214: 'Ê', 215: 'Í', 216: 'Ó', 217: 'Ô', 218: 'Õ',
  219: 'Ú', 221: 'Ç', 222: ',', 223: '.', 224: '!', 225: '?', 226: ';',
  227: ':', 228: '_', 229: '(', 231: ')', 232: '"', 233: '#', 234: '$',
  235: '%', 236: '@', 237: ' ', 238: '\n'}
  tam_lista = len(lista_blocos)
  mensagem = ''

  for bloco in range(0, tam_lista): 
    lista_blocos[bloco] = pow(lista_blocos[bloco], d, n)
    mensagem += códigos_para_símbolos[lista_blocos[bloco]]
  return mensagem

blocos = [2823, 2688, 398, 4335, 2273]
n = 6319
d = 3
descriptar(blocos, n, d)